--These Scripts are not mine!



function dly() --Key Strokes
--Made By dyl#5893
--Open Source So Skid Away!


local KeyStrokes = Instance.new("ScreenGui")
local DragFrame = Instance.new("Frame")
local A = Instance.new("TextLabel")
local UICorner = Instance.new("UICorner")
local UIGradient = Instance.new("UIGradient")
local D = Instance.new("TextLabel")
local UICorner_2 = Instance.new("UICorner")
local UIGradient_2 = Instance.new("UIGradient")
local S = Instance.new("TextLabel")
local UICorner_3 = Instance.new("UICorner")
local UIGradient_3 = Instance.new("UIGradient")
local W = Instance.new("TextLabel")
local UICorner_4 = Instance.new("UICorner")
local UIGradient_4 = Instance.new("UIGradient")
local Space = Instance.new("TextLabel")
local UICorner_5 = Instance.new("UICorner")
local UIGradient_5 = Instance.new("UIGradient")
local LMB = Instance.new("TextLabel")
local UICorner_6 = Instance.new("UICorner")
local UIGradient_6 = Instance.new("UIGradient")
local RMB = Instance.new("TextLabel")
local UICorner_7 = Instance.new("UICorner")
local UIGradient_7 = Instance.new("UIGradient")
local C = Instance.new("TextLabel")
local UICorner_8 = Instance.new("UICorner")

--Properties:

KeyStrokes.Name = "KeyStrokes"
KeyStrokes.Parent = game.CoreGui

DragFrame.Name = "DragFrame"
DragFrame.Parent = KeyStrokes
DragFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DragFrame.BackgroundTransparency = 1.000
DragFrame.Position = UDim2.new(0.0183958802, 0, 0.786190485, 0)
DragFrame.Size = UDim2.new(0, 171, 0, 111)
DragFrame.Visible = true
DragFrame.InputBegan:Connect(function(key, gp)
	while key.KeyCode == Enum.KeyCode.LeftControl do
	wait()
    DragFrame.Active = true
    DragFrame.Draggable = true
	end
	  DragFrame.Active = false
    DragFrame.Draggable = false
end)

A.Name = "A"
A.Parent = DragFrame
A.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
A.BorderSizePixel = 0
A.Position = UDim2.new(-0.0149999997, 0, 0.494000793, 0)
A.Size = UDim2.new(0, 55, 0, 55)
A.Font = Enum.Font.Ubuntu
A.Text = "A"
A.TextColor3 = Color3.fromRGB(124, 99, 158)
A.TextSize = 39.000
A.TextWrapped = true
local uis = game:GetService("UserInputService")
uis.InputBegan:Connect(function(key, gp)
    while uis:IsKeyDown(Enum.KeyCode.A) do
    wait()
      A.TextColor3 = Color3.fromRGB(161, 42, 42)
			A.Position = UDim2.new(-0.0149999997, 0, 0.494000793, 0)
    end
    A.TextColor3 = Color3.fromRGB(124, 99, 158)
		A.Position = UDim2.new(-0.0149999997, 0, 0.504000793, 0)
end)

UICorner.Parent = A

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(211, 134, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(68, 170, 193))}
UIGradient.Rotation = 45
UIGradient.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(0.26, 0.55), NumberSequenceKeypoint.new(1.00, 0.00)}
UIGradient.Parent = A

D.Name = "D"
D.Parent = DragFrame
D.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
D.BorderSizePixel = 0
D.Position = UDim2.new(0.649999976, 0, 0.493999988, 0)
D.Size = UDim2.new(0, 55, 0, 55)
D.Font = Enum.Font.Ubuntu
D.Text = "D"
D.TextColor3 = Color3.fromRGB(124, 99, 158)
D.TextSize = 39.000
D.TextWrapped = true
local uis = game:GetService("UserInputService")
uis.InputBegan:Connect(function(key, gp)
    while uis:IsKeyDown(Enum.KeyCode.D) do
    wait()
      D.TextColor3 = Color3.fromRGB(161, 42, 42)
			D.Position = UDim2.new(0.649999976, 0, 0.503999988, 0)
    end
    D.TextColor3 = Color3.fromRGB(124, 99, 158)
		D.Position = UDim2.new(0.649999976, 0, 0.493999988, 0)
end)

UICorner_2.Parent = D

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(211, 134, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(68, 170, 193))}
UIGradient_2.Rotation = 45
UIGradient_2.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(0.26, 0.55), NumberSequenceKeypoint.new(1.00, 0.00)}
UIGradient_2.Parent = D

S.Name = "S"
S.Parent = DragFrame
S.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
S.BorderSizePixel = 0
S.Position = UDim2.new(0.318185151, 0, 0.494000852, 0)
S.Size = UDim2.new(0, 55, 0, 55)
S.Font = Enum.Font.Ubuntu
S.Text = "S"
S.TextColor3 = Color3.fromRGB(124, 99, 158)
S.TextSize = 39.000
S.TextWrapped = true
local uis = game:GetService("UserInputService")
uis.InputBegan:Connect(function(key, gp)
    while uis:IsKeyDown(Enum.KeyCode.S) do
    wait()
    S.TextColor3 = Color3.fromRGB(161, 42, 42)
    S.Position = UDim2.new(0.318185151, 0, 0.494000852, 0)
  end
  S.TextColor3 = Color3.fromRGB(124, 99, 158)
  S.Position = UDim2.new(0.318185151, 0, 0.490000000, 0)
end)


UICorner_3.Parent = S

UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(211, 134, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(68, 170, 193))}
UIGradient_3.Rotation = 45
UIGradient_3.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(0.26, 0.55), NumberSequenceKeypoint.new(1.00, 0.00)}
UIGradient_3.Parent = S

W.Name = "W"
W.Parent = DragFrame
W.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
W.BorderSizePixel = 0
W.Position = UDim2.new(0.316152036, 0, -0.00620000018, 0)
W.Size = UDim2.new(0, 55, 0, 55)
W.Font = Enum.Font.Ubuntu
W.Text = "W"
W.TextColor3 = Color3.fromRGB(124, 99, 158)
W.TextSize = 39.000
W.TextWrapped = true
local uis = game:GetService("UserInputService")
uis.InputBegan:Connect(function(key, gp)
    while uis:IsKeyDown(Enum.KeyCode.W) do
    wait()
      W.TextColor3 = Color3.fromRGB(161, 42, 42)
			W.Position = UDim2.new(0.316152036, 0, -0.00620000018, 0)
    end
    W.TextColor3 = Color3.fromRGB(124, 99, 158)
		W.Position = UDim2.new(0.316152036, 0, -0.0620000018, 0)
end)

UICorner_4.Parent = W

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(211, 134, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(68, 170, 193))}
UIGradient_4.Rotation = 45
UIGradient_4.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(0.26, 0.55), NumberSequenceKeypoint.new(1.00, 0.00)}
UIGradient_4.Parent = W

Space.Name = "Space"
Space.Parent = DragFrame
Space.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Space.BorderSizePixel = 0
Space.Position = UDim2.new(-0.0150000146, 0, 1.50999999, 0)
Space.Size = UDim2.new(0, 168, 0, 35)
Space.Font = Enum.Font.Ubuntu
Space.LineHeight = 0.790
Space.Text = " "
Space.TextColor3 = Color3.fromRGB(124, 99, 158)
Space.TextSize = 39.000
Space.TextWrapped = true
local uis = game:GetService("UserInputService")
uis.InputBegan:Connect(function(key, gp)
    while uis:IsKeyDown(Enum.KeyCode.Space) do
    wait()
Space.Position = UDim2.new(-0.0150000146, 0, 1.50000000, 0)
    end
Space.Position = UDim2.new(-0.0150000146, 0, 1.50999999, 0)
end)

UICorner_5.Parent = Space

UIGradient_5.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(211, 134, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(68, 170, 193))}
UIGradient_5.Rotation = 45
UIGradient_5.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(0.26, 0.55), NumberSequenceKeypoint.new(1.00, 0.00)}
UIGradient_5.Parent = Space

LMB.Name = "LMB"
LMB.Parent = DragFrame
LMB.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
LMB.BorderSizePixel = 0
LMB.Position = UDim2.new(-0.0151481852, 0, 1, 0)
LMB.Size = UDim2.new(0, 78, 0, 55)
LMB.Font = Enum.Font.Ubuntu
LMB.Text = "LMB"
LMB.TextColor3 = Color3.fromRGB(124, 99, 158)
LMB.TextSize = 30.000
LMB.TextWrapped = true
local uis = game:GetService"UserInputService".InputBegan:Connect(function(input, gameprocessedevent)
if input.UserInputType==Enum.UserInputType.MouseButton1 then do
  wait()
  LMB.TextColor3 = Color3.fromRGB(161, 42, 42)
  LMB.Position = UDim2.new(-0.0151481852, 0, 0.98, 0)
end
end

wait(0.2)

if input.UserInputType==Enum.UserInputType.MouseButton1 then do
  wait()
  LMB.TextColor3 = Color3.fromRGB(124, 99, 158)
  LMB.Position = UDim2.new(-0.0151481852, 0, 1, 0)	
end
end
end)


UICorner_6.Parent = LMB

UIGradient_6.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(211, 134, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(68, 170, 193))}
UIGradient_6.Rotation = 45
UIGradient_6.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(0.26, 0.55), NumberSequenceKeypoint.new(1.00, 0.00)}
UIGradient_6.Parent = LMB

RMB.Name = "RMB"
RMB.Parent = DragFrame
RMB.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
RMB.BorderSizePixel = 0
RMB.Position = UDim2.new(0.510935664, 0, 1, 0)
RMB.Size = UDim2.new(0, 78, 0, 55)
RMB.Font = Enum.Font.Ubuntu
RMB.Text = "RMB"
RMB.TextColor3 = Color3.fromRGB(124, 99, 158)
RMB.TextSize = 30.000
RMB.TextWrapped = true
local uis = game:GetService"UserInputService".InputBegan:Connect(function(input, gameprocessedevent)
if input.UserInputType==Enum.UserInputType.MouseButton2 then do
  wait()
  RMB.TextColor3 = Color3.fromRGB(161, 42, 42)
  RMB.Position = UDim2.new(0.510935664, 0, 0.98, 0)
end
end

wait(0.2)

if input.UserInputType==Enum.UserInputType.MouseButton2 then do
  wait()
  RMB.TextColor3 = Color3.fromRGB(124, 99, 158)
  RMB.Position = UDim2.new(1.510935664, 0, 1, 0)	
end
end
end)

UICorner_7.Parent = RMB

UIGradient_7.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(211, 134, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(68, 170, 193))}
UIGradient_7.Rotation = 45
UIGradient_7.Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(0.26, 0.55), NumberSequenceKeypoint.new(1.00, 0.00)}
UIGradient_7.Parent = RMB

C.Name = "Credits"
C.Parent = DragFrame
C.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
C.BackgroundTransparency = (1)
C.BorderSizePixel = 0
C.Position = UDim2.new(10, 90, 8, -20)
C.Size = UDim2.new(0, 78, 0, 55)
C.Font = Enum.Font.Ubuntu
C.Text = "Created By dyl#5893 CTRL Enables Drag Control"
C.TextColor3 = Color3.fromRGB(124, 99, 158)
C.TextSize = 10.0
C.TextWrapped = true

UICorner_8.Parent = C
end

function AimTranslator()
--[[
    Message Translator
    Made by Aim, updated by cli, Updated by rang#1234
    Credits to Riptxde for the sending chathook
--]]
pcall(function()
    if not game['Loaded'] then game['Loaded']:Wait() end; repeat wait(.06) until game:GetService('Players').LocalPlayer ~= nil
    local YourLang = "en" -- Language code that the messages are going to be translated to
    
    local googlev = isfile'googlev.txt' and readfile'googlev.txt' or ''
    
    function googleConsent(Body) -- Because google really said: "Fuck you."
        local args = {}
    
        for match in Body:gmatch('<input type="hidden" name=".-" value=".-">') do
            local k,v = match:match('<input type="hidden" name="(.-)" value="(.-)">')
            args[k] = v
        end
        googlev = args.v
        writefile('googlev.txt', args.v)
    end
    
    local function got(url, Method, Body) -- Basic version of https://www.npmjs.com/package/got using synapse's request API for google websites
        Method = Method or "GET"
        
        local res = syn.request({
            Url = url,
            Method = Method,
            Headers = {cookie="CONSENT=YES+"..googlev},
            Body = Body
        })
        
        if res.Body:match('https://consent.google.com/s') then
            print('consent')
            googleConsent(res.Body)
            res = syn.request({
                Url = url,
                Method = "GET",
                Headers = {cookie="CONSENT=YES+"..googlev}
            })
        end
        
        return res
    end
    
    local languages = {
        auto = "Automatic",
        af = "Afrikaans",
        sq = "Albanian",
        am = "Amharic",
        ar = "Arabic",
        hy = "Armenian",
        az = "Azerbaijani",
        eu = "Basque",
        be = "Belarusian",
        bn = "Bengali",
        bs = "Bosnian",
        bg = "Bulgarian",
        ca = "Catalan",
        ceb = "Cebuano",
        ny = "Chichewa",
        ['zh-cn'] = "Chinese Simplified",
        ['zh-tw'] = "Chinese Traditional",
        co = "Corsican",
        hr = "Croatian",
        cs = "Czech",
        da = "Danish",
        nl = "Dutch",
        en = "English",
        eo = "Esperanto",
        et = "Estonian",
        tl = "Filipino",
        fi = "Finnish",
        fr = "French",
        fy = "Frisian",
        gl = "Galician",
        ka = "Georgian",
        de = "German",
        el = "Greek",
        gu = "Gujarati",
        ht = "Haitian Creole",
        ha = "Hausa",
        haw = "Hawaiian",
        iw = "Hebrew",
        hi = "Hindi",
        hmn = "Hmong",
        hu = "Hungarian",
        is = "Icelandic",
        ig = "Igbo",
        id = "Indonesian",
        ga = "Irish",
        it = "Italian",
        ja = "Japanese",
        jw = "Javanese",
        kn = "Kannada",
        kk = "Kazakh",
        km = "Khmer",
        ko = "Korean",
        ku = "Kurdish (Kurmanji)",
        ky = "Kyrgyz",
        lo = "Lao",
        la = "Latin",
        lv = "Latvian",
        lt = "Lithuanian",
        lb = "Luxembourgish",
        mk = "Macedonian",
        mg = "Malagasy",
        ms = "Malay",
        ml = "Malayalam",
        mt = "Maltese",
        mi = "Maori",
        mr = "Marathi",
        mn = "Mongolian",
        my = "Myanmar (Burmese)",
        ne = "Nepali",
        no = "Norwegian",
        ps = "Pashto",
        fa = "Persian",
        pl = "Polish",
        pt = "Portuguese",
        pa = "Punjabi",
        ro = "Romanian",
        ru = "Russian",
        sm = "Samoan",
        gd = "Scots Gaelic",
        sr = "Serbian",
        st = "Sesotho",
        sn = "Shona",
        sd = "Sindhi",
        si = "Sinhala",
        sk = "Slovak",
        sl = "Slovenian",
        so = "Somali",
        es = "Spanish",
        su = "Sundanese",
        sw = "Swahili",
        sv = "Swedish",
        tg = "Tajik",
        ta = "Tamil",
        te = "Telugu",
        th = "Thai",
        tr = "Turkish",
        uk = "Ukrainian",
        ur = "Urdu",
        uz = "Uzbek",
        vi = "Vietnamese",
        cy = "Welsh",
        xh = "Xhosa",
        yi = "Yiddish",
        yo = "Yoruba",
        zu = "Zulu"
    };
    
    function find(lang)
        for i,v in pairs(languages) do
            if i == lang or v == lang then
                return i
            end
        end
    end
    
    function isSupported(lang)
        local key = find(lang)
        return key and true or false 
    end
    
    function getISOCode(lang)
        local key = find(lang)
        return key
    end
    
    function stringifyQuery(dataFields)
        local data = ""
        for k, v in pairs(dataFields) do
            if type(v) == "table" then
                for _,v in pairs(v) do
                    data = data .. ("&%s=%s"):format(
                        game.HttpService:UrlEncode(k),
                        game.HttpService:UrlEncode(v)
                    )
                end
            else
                data = data .. ("&%s=%s"):format(
                    game.HttpService:UrlEncode(k),
                    game.HttpService:UrlEncode(v)
                )
            end
        end
        data = data:sub(2)
        return data
    end
    
    local reqid = math.random(1000,9999)
    local rpcidsTranslate = "MkEWBc"
    local rootURL = "https://translate.google.com/"
    local executeURL = "https://translate.google.com/_/TranslateWebserverUi/data/batchexecute"
    local fsid, bl
    
    do -- init
    	print('initialize')
        local InitialReq = got(rootURL)
        fsid = InitialReq.Body:match('"FdrFJe":"(.-)"')
        bl = InitialReq.Body:match('"cfb2h":"(.-)"')
    end
    
    local HttpService = game:GetService("HttpService")
    function jsonE(o)
        return HttpService:JSONEncode(o)
    end
    function jsonD(o)
        return HttpService:JSONDecode(o)
    end
    
    function translate(str, to, from)
        reqid = reqid + 10000
        from = from and getISOCode(from) or 'auto'
        to = to and getISOCode(to) or 'en'
    
        local data = {{str, from, to, true}, {nil}}
    
        local freq = {
            {
                {
                    rpcidsTranslate, 
                    jsonE(data),
                    nil,
                    "generic"
                }
            }
        }
    
        local url = executeURL..'?'..stringifyQuery{rpcids = rpcidsTranslate, ['f.sid'] = fsid, bl = bl, hl="en", _reqid = reqid-10000, rt = 'c'}
        local body = stringifyQuery{['f.req'] = jsonE(freq)}
        
        local req = got(url, "POST", body)
    	
        local body = jsonD(req.Body:match'%[.-%]\n')
        local translationData = jsonD(body[1][3])
        local result = {
            text = "",
            from = {
                language = "",
                text = ""
            },
            raw = ""
        }
        result.raw = translationData
        result.text = translationData[2][1][1][6][1][1]
        
        result.from.language = translationData[3]
        result.from.text = translationData[2][5][1]
    
        return result
    end
    
    local Players = game:GetService("Players")
    local LP = Players.LocalPlayer
    local StarterGui = game:GetService('StarterGui')
    for i=1, 15 do
        local r = pcall(StarterGui["SetCore"])
        if r then break end
        game:GetService('RunService').RenderStepped:wait()
    end
    wait()
    
    local properties = {
        Color = Color3.new(1,1,0);
        Font = Enum.Font.SourceSansItalic;
        TextSize = 16;
    }
    
    game:GetService("StarterGui"):SetCore("SendNotification",
        {
            Title = "Chat Translator",
            Text = "Ported to Google Translate",
            Duration = 3
        }
    )
                      
    properties.Text = "[TR] To send messages in a language, say > followed by the target language/language code, e.g.: >ru or >russian. To disable (go back to original language), say >d."
    StarterGui:SetCore("ChatMakeSystemMessage", properties)
    
    function translateFrom(message)
        local translation = translate(message, YourLang)
    
        local text
        if translation.from.language ~= YourLang then 
            text = translation.text
        end
    
        return {text, translation.from.language}
    end
    
    function get(plr, msg)
        local tab = translateFrom(msg)
        local translation = tab[1]
        if translation then
            properties.Text = "("..tab[2]:upper()..") ".."[".. plr.Name .."]: "..translation
            StarterGui:SetCore("ChatMakeSystemMessage", properties)
        end
    end
    
    game.ReplicatedStorage.DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(messageData) 
        get(game:GetService("Players")[messageData.FromSpeaker],messageData.Message)
    end)
    
    local sendEnabled = false
    local target = ""
    
    function translateTo(message, target)
        target = target:lower() 
        local translation = translate(message, target, "auto")
    
        return translation.text
    end
    
    function disableSend()
        sendEnabled = false
        properties.Text = "[TR] Sending Disabled"
        StarterGui:SetCore("ChatMakeSystemMessage", properties)
    end
    
    local CBar, CRemote, Connected = LP['PlayerGui']:WaitForChild('Chat')['Frame'].ChatBarParentFrame['Frame'].BoxFrame['Frame'].ChatBar, game:GetService('ReplicatedStorage').DefaultChatSystemChatEvents['SayMessageRequest'], {}
    
    local HookChat = function(Bar)
        coroutine.wrap(function()
            if not table.find(Connected,Bar) then
                local Connect = Bar['FocusLost']:Connect(function(Enter)
                    if Enter ~= false and Bar['Text'] ~= '' then
                        local Message = Bar['Text']
                        Bar['Text'] = '';
                        if Message == ">d" then
                            disableSend()
                        elseif Message:sub(1,1) == ">" and not Message:find(" ") then
                            if getISOCode(Message:sub(2)) then
                                sendEnabled = true
                                target = Message:sub(2)
                            else
                                properties.Text = "[TR] Invalid language"
                                StarterGui:SetCore("ChatMakeSystemMessage", properties)
                            end
                        elseif sendEnabled then
                            Message = translateTo(Message, target)
                            if not _G.SecureChat then
                                game:GetService('Players'):Chat(Message); 
                            end
                            CRemote:FireServer(Message,'All')
                        else
                            if not _G.SecureChat then
                                game:GetService('Players'):Chat(Message); 
                            end
                            CRemote:FireServer(Message,'All')
                        end
                    end
                end)
                Connected[#Connected+1] = Bar; Bar['AncestryChanged']:Wait(); Connect:Disconnect()
            end
        end)()
    end
    
    HookChat(CBar); local BindHook = Instance.new('BindableEvent')
    
    local MT = getrawmetatable(game); local NC = MT.__namecall; setreadonly(MT, false)
    
    MT.__namecall = newcclosure(function(...)
        local Method, Args = getnamecallmethod(), {...}
        if rawequal(tostring(Args[1]),'ChatBarFocusChanged') and rawequal(Args[2],true) then 
            if LP['PlayerGui']:FindFirstChild('Chat') then
                BindHook:Fire()
            end
        end
        return NC(...)
    end)
    
    BindHook['Event']:Connect(function()
        CBar = LP['PlayerGui'].Chat['Frame'].ChatBarParentFrame['Frame'].BoxFrame['Frame'].ChatBar
        HookChat(CBar)
    end)
end) end

function ChatBypass()
--Who made This???

local Alphabet,old = return {["A"]="🇦",["B"]="🇧",["C"]="🇨",["D"]="🇩",["E"]="🇪",["F"]="🇫",["G"]="🇬",["H"]="🇭",["I"]="🇮",["J"]="🇯",["K"]="🇰",["L"]="🇱",["M"]="🇲",["N"]="🇳",["O"]="🇴",["P"]="🇵",["Q"]="🇶",["R"]="🇷",["S"]="🇸",["T"]="🇹",["U"]="🇺",["V"]="🇻",["W"]="🇼",["X"]="🇽",["Y"]="🇾",["Z"]="🇿"}
old = hookmetamethod(game,"__namecall",function(self,...)
    if getnamecallmethod() == "FireServer" and tostring(self) == "SayMessageRequest" then
        local Arguments = {...}
        local Word = {}
        for Letters in string.gmatch(Arguments[1],".") do
            table.insert(Word, Alphabet[Letters:upper()])
        end
        Arguments[1] = table.concat(Word,"او")
        return old(self, unpack(Arguments))
    end
    return old(self, ...)
end)
end
